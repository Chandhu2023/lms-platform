generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  courses       Course[]  @relation("InstructorCourses")
  enrollments   Enrollment[]
  messages      Message[]
  sentMessages  Message[] @relation("SentMessages")
}

enum Role {
  ADMIN
  TRAINER
  STUDENT
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String
  instructorId  String
  instructor    User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  price         Float     @default(0)
  status        String    @default("draft") // draft, published
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  videos        Video[]
  enrollments   Enrollment[]
  lessons       Lesson[]
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id])
  progress      Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedLessons Lesson[] @relation("CompletedLessons")

  @@unique([userId, courseId])
}

model Lesson {
  id            String    @id @default(cuid())
  title         String
  description   String?
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id])
  videoId       String?
  video         Video?    @relation(fields: [videoId], references: [id])
  order         Int
  completedBy   Enrollment[] @relation("CompletedLessons")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Video {
  id            String    @id @default(cuid())
  title         String
  description   String?
  url           String
  source        String    // Vimeo, Zoom, Google Drive
  duration      Int       // Duration in seconds
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lessons       Lesson[]
}

model Payment {
  id            String    @id @default(cuid())
  userId        String
  amount        Float
  currency      String    @default("USD")
  status        String    // pending, completed, failed
  provider      String    // stripe, razorpay
  transactionId String    @unique
  courseId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id            String    @id @default(cuid())
  content       String
  senderId      String
  sender        User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId    String
  receiver      User      @relation(fields: [receiverId], references: [id])
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

